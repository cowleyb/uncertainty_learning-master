uses data.String

component provides AdaptDriver requires data.adt.List, util.RandomInt randomInt {
	
	List htA
	
	bool stop = false
	
	Thread threads[]
	
	void workThread()
		{
		while (!stop)
			{
			htA.update(new String("alpha"), new String("alpha"))
			}
		}
	
	char[] randomStr(int len)
		{
		char res[] = new char[len]
		
		for (int i = 0; i < len; i++)
			{
			res[i] = 61 + randomInt.get(27)
			}
		
		return res
		}
	
	bool AdaptDriver:doesScale()
		{
		return true
		}
	
	void AdaptDriver:start(int threadCount, int storedItemCount)
		{
		stop = false
		
		htA = new List()
		
		for (int i = 0; i < storedItemCount; i++)
			{
			char str[] = randomStr(5)
			htA.add(new String(str))
			}
		
		threads = new Thread[threadCount]
		for (int i = 0; i < threadCount; i++)
			{
			threads[i] = asynch::workThread()
			}
		}
	
	void AdaptDriver:stop()
		{
		stop = true
		
		for (int i = 0; i < threads.arrayLength; i++)
			{
			threads[i].join()
			}
		}
	
	}